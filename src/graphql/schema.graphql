scalar ObjectID
scalar DateTime

type User {
    _id: ObjectID
    name: String
}

type Thread {
    _id: ObjectID
    title: String!
    created: DateTime!
    comments: [Comment]!
}

type Comment {
    user: ObjectID
    text: String!
    replies: [Reply]!
    timestamp: DateTime!
}

type Reply {
    user: ObjectID
    text: String!
    timestamp: DateTime!
}

interface Response {
    success: Boolean!
    message: String!
}

type AddUserResponse implements Response {
    success: Boolean!
    message: String!
    data: User
}

type QueryUserResponse implements Response {
    success: Boolean!
    message: String!
    data: User
}

type QueryUsersResponse implements Response {
    success: Boolean!
    message: String!
    data: [User]!
}

type QueryThreadsResponse implements Response {
    success: Boolean!
    message: String!
    data: [Thread]!
}

type QueryThreadResponse implements Response {
    success: Boolean!
    message: String!
    data: Thread
}

type CreateThreadResponse implements Response {
    success: Boolean!
    message: String!
    data: Thread
}

type Query {
    threads: QueryThreadsResponse!
    thread(id: ObjectID!): QueryThreadResponse!
    user(id: ObjectID!): QueryUserResponse!
    users: QueryUsersResponse!
}

type Mutation {
    addUser(name: String!): AddUserResponse!
    createThread(title: String!): CreateThreadResponse!
}
