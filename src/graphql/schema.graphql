scalar ObjectID
scalar DateTime

type User {
    _id: ObjectID
    name: String
}

type Thread {
    _id: ObjectID
    title: String!
    created: DateTime!
    comments: [Comment]!
}

type Comment {
    user: ObjectID
    text: String!
    replies: [Reply]!
    timestamp: DateTime!
}

type Reply {
    user: ObjectID
    text: String!
    timestamp: DateTime!
}

enum ActionType {
    READ
    CREATE
    UPDATE
    DELETE
}

interface Response {
    action: ActionType!
    success: Boolean!
    message: String!
}

type UserResponse implements Response {
    action: ActionType!
    success: Boolean!
    message: String!
    data: User
}

type UsersResponse implements Response {
    action: ActionType!
    success: Boolean!
    message: String!
    data: [User]!
}

type ThreadResponse implements Response {
    action: ActionType!
    success: Boolean!
    message: String!
    data: Thread
}

type ThreadsResponse implements Response {
    action: ActionType!
    success: Boolean!
    message: String!
    data: [Thread]!
}

type CommentResponse implements Response {
    action: ActionType!
    success: Boolean!
    message: String!
    threadId: String!
    data: Comment
}

type CommentsResponse implements Response {
    action: ActionType!
    success: Boolean!
    message: String!
    threadId: String!
    data: [Comment]!
}

type ReplyResponse implements Response {
    action: ActionType!
    success: Boolean!
    message: String!
    threadId: String!
    commentIndex: Int!
    data: Reply
}

type RepliesResponse implements Response {
    action: ActionType!
    success: Boolean!
    message: String!
    threadId: String!
    commentIndex: Int!
    data: [Reply]!
}
type Query {
    threads: ThreadsResponse!
    thread(id: ObjectID!): ThreadResponse!
    user(id: ObjectID!): UserResponse!
    users: UsersResponse!
}

type Mutation {
    addUser(name: String!): UserResponse!
    createThread(title: String!): ThreadResponse!
    createComment(
        threadId: String!
        user: ObjectID!
        text: String!
    ): CommentResponse!
    createReply(
        threadId: String!
        commentIdx: Int!
        user: ObjectID!
        text: String!
    ): ReplyResponse!
}
